#R_code_exam_Yellowstone_burn_recovery

#In questo codice sul recupero delle zone colpite dall'incendio nel parco di Yellowstone nel 1988:
#-confronteremo le varie immagini scaricate dal sito NASA Earth Observatory https://earthobservatory.nasa.gov/world-of-change/Yellowstone e salvate nella cartella "yellowstone" nel disco locale C in una Times series 1987-2018,
#-verrà poi calcolato variabilità multitemporale e NDVI  #library(raster) #library(rasterVis) per levelplot
#-verrà operata una CLASSIFICAZIONE delle immagini #library(RStoolbox)
#-valutazione della LAND COVER #library (ggplot2) e (gridExtra) per il plottaggio 


install.packages("raster") #scarica e installa dal CRAN o da files locali
library(raster) #richiamo questa libreria che carica\allega i files su R
setwd ("C:/lab/yellowstone/") #Windows  #setto la R Working Directory per spiegare ad R da che cartella andare a caricare il nostro dataset di immagini
library(rgdal) #importa file raster e TIF
library(rasterVis)
library(RStoolbox)
library(ggplot2)
library(gridExtra)

#1. Times series 1987-2018
#importo le immagini usando la funzione "brick" all'interno del pacchetto raster che crear un oggetto rasterbrick (oggetto raster multi-layer)

Ys_1987beforefire<-brick("Yellowstone_19870805.jpg")
Ys_1988fire<-brick("Yellowstone_19880823.jpg")
Ys_1989afterfire<-brick("Yellowstone_19890802.jpg")
Ys_1993<-brick("Yellowstone_19930922.jpg")
Ys_1996<-brick("Yellowstone_19960712.jpg")
Ys_1998<-brick("Yellowstone_19980718.jpg")
Ys_2008<-brick("Yellowstone_20080915.jpg")
Ys_2018<-brick("yellowstone_20180222.jpg")

par(mfrow=c(2,4))  #funzione generica che permette il settaggio dei parametri grafici creando un multiframe, in questo caso plottiamo le immagini in RGB(schema red,green,blue)per visualizzare un oggetto raster multi-layer

#le immagini scaricate e processate dal sito Earth Observatory NASA avevano già le bande sono state realizzate con una combinazione di luce visibile e infrarossa (verde, infrarossi a onde corte(SWIR) e vicino all'infrarosso(NIR)) per evidenziare l'area bruciata e i cambiamenti nella vegetazione.
#se l'immagine fosse stata fatta con luce visibile, il fumo sarebbe così denso nell'immagine del 1988 denso da non permettere di vedere quasi nulla. Nell'immagine in infrarosso il fumo diventa invece una patina blu.

plotRGB(Ys_1987beforefire,1, 2, 3, stretch="Lin")  #l'argomento "stretch"(lin o hist) fa si che la riflettanza delle singole bande venga "stirata" in modo che non ci siano schiacciamenti di colori e vengano tutti mostrati.
plotRGB(Ys_1988fire,1, 2, 3, stretch="Lin")
plotRGB(Ys_1989afterfire,1, 2, 3, stretch="Lin")
plotRGB(Ys_1993,1, 2, 3, stretch="Lin")
plotRGB(Ys_1996,1, 2, 3, stretch="Lin")
plotRGB(Ys_1998,1, 2, 3, stretch="Lin")
plotRGB(Ys_2008,1, 2, 3, stretch="Lin")
plotRGB(Ys_2018,1, 2, 3, stretch="Lin")

# colorRampPalette estende la palette dei colori, i numeri che vediamo a lato dell'immagine sono i valori di riflettanza e ad ogni valore è stato associato un colore
cl <- colorRampPalette(c('dark red','red','orange','yellow'))(100)  #c creazione di un vettore o array(argomento) che racchiude i nuovi colori scelti (elementi)
plot(Ys_1988fire, col=cl)

#Utilizzando la funzione "raster" carico le singole immagini e le plotto
Ys_1987beforefireR <- raster("Yellowstone_19870805.jpg") 
cts <- colorRampPalette(c("blue","dark green","light green","orange","white")) (100)
plot(Ys_1987beforefire, col=cts)
Ys_1988fireR<-raster("Yellowstone_19880823.jpg")
plot(Ys_1988fire,col=cts)
Ys_1989afterfireR<-raster("Yellowstone_19890802.jpg")
plot(Ys_1989afterfire,col=cts)
Ys_1993R<-raster("Yellowstone_19930922.jpg")
plot(Ys_1993,col=cts)
Ys_1996R<-raster("Yellowstone_19960712.jpg")
plot(Ys_1996,col=cts)
Ys_1998R<-raster("Yellowstone_19980718.jpg")
plot(Ys_1998,col=cts)
Ys_2008R<-raster("Yellowstone_20080915.jpg")
plot(Ys_2008,col=cts)
Ys_2018R<-raster("Yellowstone_20180222.jpg")
plot(Ys_2018,col=cts)

par(mfrow=c(2,4))
plot(Ys_1987beforefireR, col=cts)
plot(Ys_1988fire,col=cts)
plot(Ys_1989afterfireR,col=cts)
plot(Ys_1993R,col=cts)
plot(Ys_1996R,col=cts)
plot(Ys_1998R,col=cts)
plot(Ys_2008R,col=cts)
plot(Ys_2018R,col=cts)

#Creiamo una lista con la funzione "list.files" e utilizziamo un "pattern" che accomuna tutti i files, in questo caso "Yellowstone_" Per importare tutte queste immagini insieme usiamo la funzione "lapply" applicabile ad una lista di file o un vettore
rlist <- list.files(pattern="Yellowstone_")
rlist

import <- lapply(rlist,raster) #alla funzione "lapply" viene applicata la funzione "raster"
import

timesYs<-stack(import) #la funzione "stack" crea un unico file partendo da una lista o un dataframe a cui associamo un nome
levelplot(timesYs) 

#Possiamo anche applicare la funzione "levelplot" considerando ogni singolo file interno a "timesYs"
levelplot(timesYs$Ys_1987beforefireR)

cl <- colorRampPalette(c("blue","light blue","pink","red"))(100)
levelplot(timesYs,col.regions=cl,main="Yellostone Park's burn recovery",names.attr=c("1987","1988", "1989", "1993","1996","1998","2008","2018"))

#2. Unsupervised classification
#in questo processo vengono accorpati pixel di un'immagine con valori simili a rappresentare una CLASSE. Ogni classe ha quindi dei pixel che corrispondono ad un determinato valore di riflettanza.

set.seed(42)  #questa funzione fa in modo che vengano utilizzate sempre le stesse repliche per il modello e che i colori rimangano gli stessi.
class1987<- unsuperClass(Ys_1987beforefire, nClasses=5)
cl <- colorRampPalette(c('black','purple','red','orange','yellow'))(100)
plot(class1987$map,col=cl)
class1988<- unsuperClass(Ys_1988fire, nClasses=5)
plot(class1988$map,col=cl)
class1989<- unsuperClass(Ys_1989afterfire, nClasses=5)
plot(class1989$map,col=cl)
class2018<- unsuperClass(Ys_2018, nClasses=5)
plot(class2018$map,col=cl)

set.seed(1)
par(mfrow=c(2,2))
plot(class1987$map,col=cl)
plot(class1988$map,col=cl)
plot(class1989$map,col=cl)
plot(class2018$map,col=cl)

#3. NDVI (indice di vegetazione normalizzato)
#ndvi
#(NIR-RED)/(NIR+RED)

#time 1
clndvi <- colorRampPalette(c('darkblue','yellow','red','black'))(100)
ndvi1 <- (Ys_1989afterfire$Yellowstone_19890802.1-Ys_1989afterfire$Yellowstone_19890802.2) / (Ys_1989afterfire$Yellowstone_19890802.1+Ys_1989afterfire$Yellowstone_19890802.2) 
plot(ndvi1, col=clndvi, main="NDVI time 1")

#time 2
ndvi2 <- (Ys_2018$yellowstone_20180222.1-Ys_2018$yellowstone_20180222.2) / (Ys_2018$yellowstone_20180222.1+Ys_2018$yellowstone_20180222.2)
plot(ndvi2, col=clndvi, main="NDVI time 2")

par(mfrow=c(1,2))
plot(ndvi1, col=clndvi)
plot(ndvi2, col=clndvi)

difndvi<-ndvi1-ndvi2
plot(difndvi,col=clndvi, main="NDVI time1-time2") #o senza la colorramppalette

#Indici spettrali
si1 <-spectralIndices(Ys_1989afterfire, green=3, red=2, nir=1)
plot(vi1, col=cl)

si2 <-spectralIndices(Ys_2018, green=3, red=2, nir=1)
plot(vi2, col=cl)

#4.Variabilità multitemporale (controllare!!!!!!)
#sull'asse x viene messo l'anno, sull'asse y il valore del pixel e viene misurata la varianza dello stesso pixel sulla stessa banda nel corso degli anni.
#Nel caso dell'incendio e della vegetazione si crea un'alta variabilità sull'omogeneità della distribuzione delle essenze vegetali. Ci sarà maggiore variazione di pixel

#worldwide NDVI
plot(copNDVI)

# Pixels with values 253, 254 and 255 (water) will be set as NA’s.
copNDVI <- reclassify(copNDVI, cbind(253:255, NA))
plot(copNDVI)

# rasterVis package needed:
levelplot(copNDVI)

#5. Land cover
#per plottare in modo migliore le immagini richiamo la library ggplot2 e gridExtra

Ys_1987beforefire<-brick("Yellowstone_19870805.jpg")
Ys_1988fire<-brick("Yellowstone_19880823.jpg")
Ys_1989afterfire<-brick("Yellowstone_19890802.jpg")
Ys_2018<-brick("yellowstone_20180222.jpg")

plotRGB(Ys_1987beforefire,1, 2, 3, stretch="Lin")
plotRGB(Ys_1988fire,1, 2, 3, stretch="Lin")
plotRGB(Ys_1989afterfire,1, 2, 3, stretch="Lin")
plotRGB(Ys_2018,1, 2, 3, stretch="Lin")

ggRGB(Ys_1987beforefire,1, 2, 3, stretch="Lin") #con questa funzione vengono visualizzate anche le coordinate spaziali del nostro oggetto
ggRGB(Ys_1988fire,1, 2, 3, stretch="Lin")
ggRGB(Ys_1989afterfire,1, 2, 3, stretch="Lin")
ggRGB(Ys_2018,1, 2, 3, stretch="Lin")

#per unire i plot generati in questo caso utiliazziamo la funzione "grid.arrange" dalla library gridExtra. Questa funzione compone il nostro multiframe unendo varie parti in un grafico.
